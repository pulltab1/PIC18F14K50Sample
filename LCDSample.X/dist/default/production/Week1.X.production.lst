

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Jan 19 22:57:28 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           	psect	smallconst
    27  000300                     __psmallconst:
    28                           	opt stack 0
    29  000300  00                 	db	0
    30  000301                     _dpowers:
    31                           	opt stack 0
    32  000301  0001               	dw	1
    33  000303  000A               	dw	10
    34  000305  0064               	dw	100
    35  000307  03E8               	dw	1000
    36  000309  2710               	dw	10000
    37  00030B                     __end_of_dpowers:
    38                           	opt stack 0
    39  0000                     _EEADR	set	4009
    40  0000                     _EECON1bits	set	4006
    41  0000                     _EECON2	set	4007
    42  0000                     _EEDATA	set	4008
    43  0000                     _INTCONbits	set	4082
    44  0000                     _SSPADD	set	4040
    45  0000                     _SSPBUF	set	4041
    46  0000                     _SSPCON1	set	4038
    47  0000                     _SSPCON2	set	4037
    48  0000                     _SSPCON2bits	set	4037
    49  0000                     _SSPSTAT	set	4039
    50  0000                     _SSPSTATbits	set	4039
    51  0000                     _ACKDT	set	32301
    52  0000                     _ACKEN	set	32300
    53  0000                     _ACKSTAT	set	32302
    54  0000                     _PEN	set	32298
    55  0000                     _SSPIF	set	31987
    56  00030B                     STR_1:
    57  00030B  48                 	db	72	;'H'
    58  00030C  65                 	db	101	;'e'
    59  00030D  6C                 	db	108	;'l'
    60  00030E  6C                 	db	108	;'l'
    61  00030F  6F                 	db	111	;'o'
    62  000310  00                 	db	0
    63  000311                     STR_2:
    64  000311  25                 	db	37
    65  000312  64                 	db	100	;'d'
    66  000313  00                 	db	0
    67                           
    68                           ; #config settings
    69  000314  00                 	db	0	; dummy byte at the end
    70  0000                     
    71                           	psect	cinit
    72  00063E                     __pcinit:
    73                           	opt stack 0
    74  00063E                     start_initialization:
    75                           	opt stack 0
    76  00063E                     __initialization:
    77                           	opt stack 0
    78  00063E                     end_of_initialization:
    79                           	opt stack 0
    80  00063E                     __end_of__initialization:
    81                           	opt stack 0
    82  00063E  0E00               	movlw	low (__Lmediumconst shr (0+16))
    83  000640  6EF8               	movwf	tblptru,c
    84  000642  0100               	movlb	0
    85  000644  EFBA  F002         	goto	_main	;jump to C main() function
    86                           tblptru	equ	0xFF8
    87                           
    88                           	psect	cstackCOMRAM
    89  000001                     __pcstackCOMRAM:
    90                           	opt stack 0
    91  000001                     ??_i2c_wait:
    92  000001                     ?___lwdiv:
    93                           	opt stack 0
    94  000001                     ___lwdiv@dividend:
    95                           	opt stack 0
    96                           
    97                           ; 2 bytes @ 0x0
    98  000001                     	ds	1
    99  000002                     i2c_send@data:
   100                           	opt stack 0
   101                           
   102                           ; 1 bytes @ 0x1
   103  000002                     	ds	1
   104  000003                     lcd_send_command@data:
   105                           	opt stack 0
   106  000003                     lcd_send_data@data:
   107                           	opt stack 0
   108  000003                     ___lwdiv@divisor:
   109                           	opt stack 0
   110                           
   111                           ; 2 bytes @ 0x2
   112  000003                     	ds	1
   113  000004                     ??_lcd_init:
   114  000004                     lcd_putch@c:
   115                           	opt stack 0
   116  000004                     lcd_set_cursor@pos:
   117                           	opt stack 0
   118                           
   119                           ; 1 bytes @ 0x3
   120  000004                     	ds	1
   121  000005                     putch@ch:
   122                           	opt stack 0
   123  000005                     ___lwdiv@quotient:
   124                           	opt stack 0
   125                           
   126                           ; 2 bytes @ 0x4
   127  000005                     	ds	2
   128  000007                     ___lwdiv@counter:
   129                           	opt stack 0
   130                           
   131                           ; 1 bytes @ 0x6
   132  000007                     	ds	1
   133  000008                     ?___lwmod:
   134                           	opt stack 0
   135  000008                     ___lwmod@dividend:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0x7
   139  000008                     	ds	2
   140  00000A                     ___lwmod@divisor:
   141                           	opt stack 0
   142                           
   143                           ; 2 bytes @ 0x9
   144  00000A                     	ds	2
   145  00000C                     ___lwmod@counter:
   146                           	opt stack 0
   147                           
   148                           ; 1 bytes @ 0xB
   149  00000C                     	ds	1
   150  00000D                     ?_printf:
   151                           	opt stack 0
   152  00000D                     printf@f:
   153                           	opt stack 0
   154                           
   155                           ; 2 bytes @ 0xC
   156  00000D                     	ds	4
   157  000011                     ??_printf:
   158                           
   159                           ; 0 bytes @ 0x10
   160  000011                     	ds	1
   161  000012                     printf@ap:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x11
   165  000012                     	ds	2
   166  000014                     printf@flag:
   167                           	opt stack 0
   168                           
   169                           ; 1 bytes @ 0x13
   170  000014                     	ds	1
   171  000015                     printf@prec:
   172                           	opt stack 0
   173                           
   174                           ; 1 bytes @ 0x14
   175  000015                     	ds	1
   176  000016                     printf@val:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x15
   180  000016                     	ds	2
   181  000018                     printf@c:
   182                           	opt stack 0
   183                           
   184                           ; 1 bytes @ 0x17
   185  000018                     	ds	1
   186  000019                     main@hoge:
   187                           	opt stack 0
   188                           
   189                           ; 2 bytes @ 0x18
   190  000019                     	ds	2
   191                           tblptru	equ	0xFF8
   192                           
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 6 in file "main.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;  hoge            2   24[COMRAM] int 
   203 ;; Return value:  Size  Location     Type
   204 ;;		None               void
   205 ;; Registers used:
   206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 0/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   212 ;;      Params:         0       0       0       0
   213 ;;      Locals:         2       0       0       0
   214 ;;      Temps:          0       0       0       0
   215 ;;      Totals:         2       0       0       0
   216 ;;Total ram usage:        2 bytes
   217 ;; Hardware stack levels required when called:    6
   218 ;; This function calls:
   219 ;;		_i2c_enable
   220 ;;		_lcd_init
   221 ;;		_lcd_set_cursor
   222 ;;		_printf
   223 ;; This function is called by:
   224 ;;		Startup code after reset
   225 ;; This function uses a non-reentrant model
   226 ;;
   227                           
   228                           	psect	text0
   229  000574                     __ptext0:
   230                           	opt stack 0
   231  000574                     _main:
   232                           	opt stack 25
   233                           
   234                           ;main.c: 7: int hoge=114;
   235                           
   236                           ;incstack = 0
   237  000574  0E00               	movlw	0
   238  000576  6E1A               	movwf	main@hoge+1,c
   239  000578  0E72               	movlw	114
   240  00057A  6E19               	movwf	main@hoge,c
   241                           
   242                           ;main.c: 9: i2c_enable();
   243  00057C  EC0C  F003         	call	_i2c_enable	;wreg free
   244                           
   245                           ;main.c: 10: lcd_init();
   246  000580  EC1A  F002         	call	_lcd_init	;wreg free
   247  000584                     l1148:
   248                           
   249                           ;main.c: 12: lcd_set_cursor(0);
   250  000584  0E00               	movlw	0
   251  000586  ECFA  F002         	call	_lcd_set_cursor
   252                           
   253                           ;main.c: 13: printf("Hello");
   254  00058A  0E0B               	movlw	low STR_1
   255  00058C  6E0D               	movwf	printf@f,c
   256  00058E  0E03               	movlw	high STR_1
   257  000590  6E0E               	movwf	printf@f+1,c
   258  000592  EC8B  F001         	call	_printf	;wreg free
   259                           
   260                           ;main.c: 14: lcd_set_cursor(0x40);
   261  000596  0E40               	movlw	64
   262  000598  ECFA  F002         	call	_lcd_set_cursor
   263                           
   264                           ;main.c: 15: printf("%d",hoge);
   265  00059C  0E11               	movlw	low STR_2
   266  00059E  6E0D               	movwf	printf@f,c
   267  0005A0  0E03               	movlw	high STR_2
   268  0005A2  6E0E               	movwf	printf@f+1,c
   269  0005A4  C019  F00F         	movff	main@hoge,?_printf+2
   270  0005A8  C01A  F010         	movff	main@hoge+1,?_printf+3
   271  0005AC  EC8B  F001         	call	_printf	;wreg free
   272  0005B0  D7E9               	goto	l1148
   273  0005B2                     __end_of_main:
   274                           	opt stack 0
   275                           tblptru	equ	0xFF8
   276                           
   277 ;; *************** function _printf *****************
   278 ;; Defined at:
   279 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;  f               2   12[COMRAM] PTR const unsigned char 
   282 ;;		 -> STR_2(3), STR_1(6), 
   283 ;; Auto vars:     Size  Location     Type
   284 ;;  tmpval          4    0        struct .
   285 ;;  cp              3    0        PTR const unsigned char 
   286 ;;  val             2   21[COMRAM] unsigned int 
   287 ;;  ap              2   17[COMRAM] PTR void [1]
   288 ;;		 -> ?_printf(2), 
   289 ;;  len             2    0        unsigned int 
   290 ;;  c               1   23[COMRAM] char 
   291 ;;  prec            1   20[COMRAM] char 
   292 ;;  flag            1   19[COMRAM] unsigned char 
   293 ;; Return value:  Size  Location     Type
   294 ;;                  2   12[COMRAM] int 
   295 ;; Registers used:
   296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   302 ;;      Params:         4       0       0       0
   303 ;;      Locals:         7       0       0       0
   304 ;;      Temps:          1       0       0       0
   305 ;;      Totals:        12       0       0       0
   306 ;;Total ram usage:       12 bytes
   307 ;; Hardware stack levels used:    1
   308 ;; Hardware stack levels required when called:    5
   309 ;; This function calls:
   310 ;;		___lwdiv
   311 ;;		___lwmod
   312 ;;		_putch
   313 ;; This function is called by:
   314 ;;		_main
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           	psect	text1
   319  000316                     __ptext1:
   320                           	opt stack 0
   321  000316                     _printf:
   322                           	opt stack 25
   323                           
   324                           ;doprnt.c: 466: va_list ap;
   325                           ;doprnt.c: 499: signed char c;
   326                           ;doprnt.c: 506: signed char prec;
   327                           ;doprnt.c: 508: unsigned char flag;
   328                           ;doprnt.c: 523: union {
   329                           ;doprnt.c: 524: unsigned long vd;
   330                           ;doprnt.c: 525: double integ;
   331                           ;doprnt.c: 526: } tmpval;
   332                           ;doprnt.c: 528: unsigned int val;
   333                           ;doprnt.c: 529: unsigned len;
   334                           ;doprnt.c: 530: const char * cp;
   335                           ;doprnt.c: 533: *ap = __va_start();
   336                           
   337                           ;incstack = 0
   338  000316  0E0F               	movlw	low (?_printf+2)
   339  000318  6E12               	movwf	printf@ap,c
   340  00031A  0E00               	movlw	high (?_printf+2)
   341  00031C  6E13               	movwf	printf@ap+1,c
   342                           
   343                           ;doprnt.c: 536: while(c = *f++) {
   344  00031E  D07D               	goto	l1140
   345  000320                     l1094:
   346                           
   347                           ;doprnt.c: 538: if(c != '%')
   348  000320  0E25               	movlw	37
   349  000322  1818               	xorwf	printf@c,w,c
   350  000324  B4D8               	btfsc	status,2,c
   351  000326  D004               	goto	l1098
   352                           
   353                           ;doprnt.c: 540: {
   354                           ;doprnt.c: 541: (putch(c) );
   355  000328  5018               	movf	printf@c,w,c
   356  00032A  EC24  F003         	call	_putch
   357                           
   358                           ;doprnt.c: 542: continue;
   359  00032E  D075               	goto	l1140
   360  000330                     l1098:
   361                           
   362                           ;doprnt.c: 543: }
   363                           ;doprnt.c: 548: flag = 0;
   364  000330  0E00               	movlw	0
   365  000332  6E14               	movwf	printf@flag,c
   366                           
   367                           ;doprnt.c: 822: }
   368                           
   369                           ;doprnt.c: 813: continue;
   370                           
   371                           ;doprnt.c: 802: default:
   372                           
   373                           ;doprnt.c: 698: case 'i':
   374                           ;doprnt.c: 699: break;
   375                           
   376                           ;doprnt.c: 697: case 'd':
   377                           
   378                           ;doprnt.c: 638: goto alldone;
   379                           
   380                           ;doprnt.c: 637: case 0:
   381                           
   382                           ;doprnt.c: 635: switch(c = *f++) {
   383  000334  C00D  FFF6         	movff	printf@f,tblptrl
   384  000338  C00E  FFF7         	movff	printf@f+1,tblptrh
   385  00033C  4A0D               	infsnz	printf@f,f,c
   386  00033E  2A0E               	incf	printf@f+1,f,c
   387  000340                     	if	0	;tblptru may be non-zero
   388  000340                     	endif
   389  000340                     	if	0	;tblptru may be non-zero
   390  000340                     	endif
   391  000340  0008               	tblrd		*
   392  000342  CFF5 F018          	movff	tablat,printf@c
   393  000346  5018               	movf	printf@c,w,c
   394                           
   395                           ; Switch size 1, requested type "space"
   396                           ; Number of cases is 3, Range of values is 0 to 105
   397                           ; switch strategies available:
   398                           ; Name         Instructions Cycles
   399                           ; simple_byte           10     6 (average)
   400                           ;	Chosen strategy is simple_byte
   401  000348  0A00               	xorlw	0	; case 0
   402  00034A  B4D8               	btfsc	status,2,c
   403  00034C  0012               	return	
   404  00034E  0A64               	xorlw	100	; case 100
   405  000350  B4D8               	btfsc	status,2,c
   406  000352  D003               	goto	l1104
   407  000354  0A0D               	xorlw	13	; case 105
   408  000356  A4D8               	btfss	status,2,c
   409  000358  D060               	goto	l1140
   410  00035A                     l1104:
   411                           
   412                           ;doprnt.c: 1253: {
   413                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   414  00035A  C012  FFD9         	movff	printf@ap,fsr2l
   415  00035E  C013  FFDA         	movff	printf@ap+1,fsr2h
   416  000362  CFDE F016          	movff	postinc2,printf@val
   417  000366  CFDD F017          	movff	postdec2,printf@val+1
   418  00036A  0E02               	movlw	2
   419  00036C  2612               	addwf	printf@ap,f,c
   420  00036E  0E00               	movlw	0
   421  000370  2213               	addwfc	printf@ap+1,f,c
   422                           
   423                           ;doprnt.c: 1261: if((int)val < 0) {
   424  000372  AE17               	btfss	printf@val+1,7,c
   425  000374  D006               	goto	l1114
   426                           
   427                           ;doprnt.c: 1262: flag |= 0x03;
   428  000376  0E03               	movlw	3
   429  000378  1214               	iorwf	printf@flag,f,c
   430                           
   431                           ;doprnt.c: 1263: val = -val;
   432  00037A  6C16               	negf	printf@val,c
   433  00037C  1E17               	comf	printf@val+1,f,c
   434  00037E  B0D8               	btfsc	status,0,c
   435  000380  2A17               	incf	printf@val+1,f,c
   436  000382                     l1114:
   437                           
   438                           ;doprnt.c: 1264: }
   439                           ;doprnt.c: 1266: }
   440                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   441  000382  0E01               	movlw	1
   442  000384  6E18               	movwf	printf@c,c
   443  000386                     l1116:
   444  000386  0E05               	movlw	5
   445  000388  1818               	xorwf	printf@c,w,c
   446  00038A  B4D8               	btfsc	status,2,c
   447  00038C  D012               	goto	l1128
   448                           
   449                           ;doprnt.c: 1306: if(val < dpowers[c])
   450  00038E  5018               	movf	printf@c,w,c
   451  000390  0D02               	mullw	2
   452  000392  0E01               	movlw	low _dpowers
   453  000394  24F3               	addwf	prodl,w,c
   454  000396  6EF6               	movwf	tblptrl,c
   455  000398  0E03               	movlw	high _dpowers
   456  00039A  20F4               	addwfc	prodh,w,c
   457  00039C  6EF7               	movwf	tblptrh,c
   458  00039E                     	if	0	;There are less than 3 active tblptr bytes
   459  00039E                     	endif
   460  00039E  0009               	tblrd		*+
   461  0003A0  50F5               	movf	tablat,w,c
   462  0003A2  5C16               	subwf	printf@val,w,c
   463  0003A4  0009               	tblrd		*+
   464  0003A6  50F5               	movf	tablat,w,c
   465  0003A8  5817               	subwfb	printf@val+1,w,c
   466  0003AA  A0D8               	btfss	status,0,c
   467  0003AC  D002               	goto	l1128
   468                           
   469                           ;doprnt.c: 1307: break;
   470  0003AE  2A18               	incf	printf@c,f,c
   471  0003B0  D7EA               	goto	l1116
   472  0003B2                     l1128:
   473                           
   474                           ;doprnt.c: 1422: {
   475                           ;doprnt.c: 1438: if(flag & 0x03)
   476  0003B2  C014  F011         	movff	printf@flag,??_printf
   477  0003B6  0E03               	movlw	3
   478  0003B8  1611               	andwf	??_printf,f,c
   479  0003BA  B4D8               	btfsc	status,2,c
   480  0003BC  D003               	goto	l1132
   481                           
   482                           ;doprnt.c: 1439: (putch('-') );
   483  0003BE  0E2D               	movlw	45
   484  0003C0  EC24  F003         	call	_putch
   485  0003C4                     l1132:
   486                           
   487                           ;doprnt.c: 1469: }
   488                           ;doprnt.c: 1472: prec = c;
   489  0003C4  C018  F015         	movff	printf@c,printf@prec
   490                           
   491                           ;doprnt.c: 1474: while(prec--) {
   492  0003C8  D024               	goto	l1138
   493  0003CA                     l1134:
   494                           
   495                           ;doprnt.c: 1478: {
   496                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   497  0003CA  5015               	movf	printf@prec,w,c
   498  0003CC  0D02               	mullw	2
   499  0003CE  0E01               	movlw	low _dpowers
   500  0003D0  24F3               	addwf	prodl,w,c
   501  0003D2  6EF6               	movwf	tblptrl,c
   502  0003D4  0E03               	movlw	high _dpowers
   503  0003D6  20F4               	addwfc	prodh,w,c
   504  0003D8  6EF7               	movwf	tblptrh,c
   505  0003DA                     	if	0	;There are less than 3 active tblptr bytes
   506  0003DA                     	endif
   507  0003DA  0009               	tblrd		*+
   508  0003DC  CFF5 F003          	movff	tablat,___lwdiv@divisor
   509  0003E0  000A               	tblrd		*-
   510  0003E2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   511  0003E6  C016  F001         	movff	printf@val,___lwdiv@dividend
   512  0003EA  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
   513  0003EE  EC70  F002         	call	___lwdiv	;wreg free
   514  0003F2  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   515  0003F6  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   516  0003FA  0E00               	movlw	0
   517  0003FC  6E0B               	movwf	___lwmod@divisor+1,c
   518  0003FE  0E0A               	movlw	10
   519  000400  6E0A               	movwf	___lwmod@divisor,c
   520  000402  EC99  F002         	call	___lwmod	;wreg free
   521  000406  5008               	movf	?___lwmod,w,c
   522  000408  0F30               	addlw	48
   523  00040A  6E18               	movwf	printf@c,c
   524                           
   525                           ;doprnt.c: 1523: }
   526                           ;doprnt.c: 1524: (putch(c) );
   527  00040C  5018               	movf	printf@c,w,c
   528  00040E  EC24  F003         	call	_putch
   529  000412                     l1138:
   530  000412  0615               	decf	printf@prec,f,c
   531  000414  2815               	incf	printf@prec,w,c
   532  000416  A4D8               	btfss	status,2,c
   533  000418  D7D8               	goto	l1134
   534  00041A                     l1140:
   535  00041A  C00D  FFF6         	movff	printf@f,tblptrl
   536  00041E  C00E  FFF7         	movff	printf@f+1,tblptrh
   537  000422  4A0D               	infsnz	printf@f,f,c
   538  000424  2A0E               	incf	printf@f+1,f,c
   539  000426                     	if	0	;tblptru may be non-zero
   540  000426                     	endif
   541  000426                     	if	0	;tblptru may be non-zero
   542  000426                     	endif
   543  000426  0008               	tblrd		*
   544  000428  CFF5 F018          	movff	tablat,printf@c
   545  00042C  5018               	movf	printf@c,w,c
   546  00042E  B4D8               	btfsc	status,2,c
   547  000430  0012               	return	
   548  000432  D776               	goto	l1094
   549  000434                     __end_of_printf:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           prodh	equ	0xFF4
   556                           prodl	equ	0xFF3
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           fsr2h	equ	0xFDA
   560                           fsr2l	equ	0xFD9
   561                           status	equ	0xFD8
   562                           
   563 ;; *************** function _putch *****************
   564 ;; Defined at:
   565 ;;		line 134 in file "Lib/lcd.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  ch              1    wreg     unsigned char 
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  ch              1    4[COMRAM] unsigned char 
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, status,2, status,0, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   579 ;;      Params:         0       0       0       0
   580 ;;      Locals:         1       0       0       0
   581 ;;      Temps:          0       0       0       0
   582 ;;      Totals:         1       0       0       0
   583 ;;Total ram usage:        1 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    4
   586 ;; This function calls:
   587 ;;		_lcd_putch
   588 ;; This function is called by:
   589 ;;		_printf
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text2
   594  000648                     __ptext2:
   595                           	opt stack 0
   596  000648                     _putch:
   597                           	opt stack 25
   598                           
   599                           ;incstack = 0
   600                           ;putch@ch stored from wreg
   601  000648  6E05               	movwf	putch@ch,c
   602                           
   603                           ;lcd.c: 135: lcd_putch(ch);
   604  00064A  5005               	movf	putch@ch,w,c
   605  00064C  EC29  F003         	call	_lcd_putch
   606  000650  0012               	return	
   607  000652                     __end_of_putch:
   608                           	opt stack 0
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           prodh	equ	0xFF4
   614                           prodl	equ	0xFF3
   615                           postinc2	equ	0xFDE
   616                           postdec2	equ	0xFDD
   617                           fsr2h	equ	0xFDA
   618                           fsr2l	equ	0xFD9
   619                           status	equ	0xFD8
   620                           
   621 ;; *************** function _lcd_putch *****************
   622 ;; Defined at:
   623 ;;		line 104 in file "Lib/lcd.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  c               1    wreg     const unsigned char 
   626 ;; Auto vars:     Size  Location     Type
   627 ;;  c               1    3[COMRAM] const unsigned char 
   628 ;; Return value:  Size  Location     Type
   629 ;;		None               void
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   637 ;;      Params:         0       0       0       0
   638 ;;      Locals:         1       0       0       0
   639 ;;      Temps:          0       0       0       0
   640 ;;      Totals:         1       0       0       0
   641 ;;Total ram usage:        1 bytes
   642 ;; Hardware stack levels used:    1
   643 ;; Hardware stack levels required when called:    3
   644 ;; This function calls:
   645 ;;		_lcd_send_data
   646 ;; This function is called by:
   647 ;;		_putch
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651                           	psect	text3
   652  000652                     __ptext3:
   653                           	opt stack 0
   654  000652                     _lcd_putch:
   655                           	opt stack 25
   656                           
   657                           ;incstack = 0
   658                           ;lcd_putch@c stored from wreg
   659  000652  6E04               	movwf	lcd_putch@c,c
   660                           
   661                           ;lcd.c: 105: lcd_send_data(c);
   662  000654  5004               	movf	lcd_putch@c,w,c
   663  000656  ECD9  F002         	call	_lcd_send_data
   664  00065A  0012               	return		;funcret
   665  00065C                     __end_of_lcd_putch:
   666                           	opt stack 0
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           prodh	equ	0xFF4
   672                           prodl	equ	0xFF3
   673                           postinc2	equ	0xFDE
   674                           postdec2	equ	0xFDD
   675                           fsr2h	equ	0xFDA
   676                           fsr2l	equ	0xFD9
   677                           status	equ	0xFD8
   678                           
   679 ;; *************** function _lcd_send_data *****************
   680 ;; Defined at:
   681 ;;		line 46 in file "Lib/lcd.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  data            1    wreg     unsigned char 
   684 ;; Auto vars:     Size  Location     Type
   685 ;;  data            1    2[COMRAM] unsigned char 
   686 ;; Return value:  Size  Location     Type
   687 ;;		None               void
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   695 ;;      Params:         0       0       0       0
   696 ;;      Locals:         1       0       0       0
   697 ;;      Temps:          0       0       0       0
   698 ;;      Totals:         1       0       0       0
   699 ;;Total ram usage:        1 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    2
   702 ;; This function calls:
   703 ;;		_i2c_send
   704 ;;		_i2c_start
   705 ;;		_i2c_stop
   706 ;; This function is called by:
   707 ;;		_lcd_putch
   708 ;;		_lcd_puts
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text4
   713  0005B2                     __ptext4:
   714                           	opt stack 0
   715  0005B2                     _lcd_send_data:
   716                           	opt stack 25
   717                           
   718                           ;incstack = 0
   719                           ;lcd_send_data@data stored from wreg
   720  0005B2  6E03               	movwf	lcd_send_data@data,c
   721                           
   722                           ;lcd.c: 47: i2c_start();
   723  0005B4  EC2E  F003         	call	_i2c_start	;wreg free
   724                           
   725                           ;lcd.c: 48: i2c_send((0x3E<<1) | 0);
   726  0005B8  0E7C               	movlw	124
   727  0005BA  EC19  F003         	call	_i2c_send
   728                           
   729                           ;lcd.c: 49: i2c_send(0 | 0x40);
   730  0005BE  0E40               	movlw	64
   731  0005C0  EC19  F003         	call	_i2c_send
   732                           
   733                           ;lcd.c: 50: i2c_send(data);
   734  0005C4  5003               	movf	lcd_send_data@data,w,c
   735  0005C6  EC19  F003         	call	_i2c_send
   736                           
   737                           ;lcd.c: 51: i2c_stop();
   738  0005CA  EC13  F003         	call	_i2c_stop	;wreg free
   739                           
   740                           ;lcd.c: 53: _delay((unsigned long)((30)*(4000000/4000000.0)));
   741  0005CE  0E0A               	movlw	10
   742  0005D0                     u397:
   743  0005D0  2EE8               	decfsz	wreg,f,c
   744  0005D2  D7FE               	goto	u397
   745  0005D4  0012               	return		;funcret
   746  0005D6                     __end_of_lcd_send_data:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           prodh	equ	0xFF4
   753                           prodl	equ	0xFF3
   754                           wreg	equ	0xFE8
   755                           postinc2	equ	0xFDE
   756                           postdec2	equ	0xFDD
   757                           fsr2h	equ	0xFDA
   758                           fsr2l	equ	0xFD9
   759                           status	equ	0xFD8
   760                           
   761 ;; *************** function ___lwmod *****************
   762 ;; Defined at:
   763 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;  dividend        2    7[COMRAM] unsigned int 
   766 ;;  divisor         2    9[COMRAM] unsigned int 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  counter         1   11[COMRAM] unsigned char 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2    7[COMRAM] unsigned int 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   778 ;;      Params:         4       0       0       0
   779 ;;      Locals:         1       0       0       0
   780 ;;      Temps:          0       0       0       0
   781 ;;      Totals:         5       0       0       0
   782 ;;Total ram usage:        5 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; This function calls:
   785 ;;		Nothing
   786 ;; This function is called by:
   787 ;;		_printf
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text5
   792  000532                     __ptext5:
   793                           	opt stack 0
   794  000532                     ___lwmod:
   795                           	opt stack 29
   796                           
   797                           ;incstack = 0
   798  000532  500A               	movf	___lwmod@divisor,w,c
   799  000534  100B               	iorwf	___lwmod@divisor+1,w,c
   800  000536  B4D8               	btfsc	status,2,c
   801  000538  D018               	goto	l593
   802  00053A  0E01               	movlw	1
   803  00053C  6E0C               	movwf	___lwmod@counter,c
   804  00053E  D004               	goto	l1082
   805  000540                     l1080:
   806  000540  90D8               	bcf	status,0,c
   807  000542  360A               	rlcf	___lwmod@divisor,f,c
   808  000544  360B               	rlcf	___lwmod@divisor+1,f,c
   809  000546  2A0C               	incf	___lwmod@counter,f,c
   810  000548                     l1082:
   811  000548  AE0B               	btfss	___lwmod@divisor+1,7,c
   812  00054A  D7FA               	goto	l1080
   813  00054C                     l1084:
   814  00054C  500A               	movf	___lwmod@divisor,w,c
   815  00054E  5C08               	subwf	___lwmod@dividend,w,c
   816  000550  500B               	movf	___lwmod@divisor+1,w,c
   817  000552  5809               	subwfb	___lwmod@dividend+1,w,c
   818  000554  A0D8               	btfss	status,0,c
   819  000556  D004               	goto	l1088
   820  000558  500A               	movf	___lwmod@divisor,w,c
   821  00055A  5E08               	subwf	___lwmod@dividend,f,c
   822  00055C  500B               	movf	___lwmod@divisor+1,w,c
   823  00055E  5A09               	subwfb	___lwmod@dividend+1,f,c
   824  000560                     l1088:
   825  000560  90D8               	bcf	status,0,c
   826  000562  320B               	rrcf	___lwmod@divisor+1,f,c
   827  000564  320A               	rrcf	___lwmod@divisor,f,c
   828  000566  2E0C               	decfsz	___lwmod@counter,f,c
   829  000568  D7F1               	goto	l1084
   830  00056A                     l593:
   831  00056A  C008  F008         	movff	___lwmod@dividend,?___lwmod
   832  00056E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   833  000572  0012               	return		;funcret
   834  000574                     __end_of___lwmod:
   835                           	opt stack 0
   836                           tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           prodh	equ	0xFF4
   841                           prodl	equ	0xFF3
   842                           wreg	equ	0xFE8
   843                           postinc2	equ	0xFDE
   844                           postdec2	equ	0xFDD
   845                           fsr2h	equ	0xFDA
   846                           fsr2l	equ	0xFD9
   847                           status	equ	0xFD8
   848                           
   849 ;; *************** function ___lwdiv *****************
   850 ;; Defined at:
   851 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  dividend        2    0[COMRAM] unsigned int 
   854 ;;  divisor         2    2[COMRAM] unsigned int 
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  quotient        2    4[COMRAM] unsigned int 
   857 ;;  counter         1    6[COMRAM] unsigned char 
   858 ;; Return value:  Size  Location     Type
   859 ;;                  2    0[COMRAM] unsigned int 
   860 ;; Registers used:
   861 ;;		wreg, status,2, status,0
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   867 ;;      Params:         4       0       0       0
   868 ;;      Locals:         3       0       0       0
   869 ;;      Temps:          0       0       0       0
   870 ;;      Totals:         7       0       0       0
   871 ;;Total ram usage:        7 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_printf
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text6
   881  0004E0                     __ptext6:
   882                           	opt stack 0
   883  0004E0                     ___lwdiv:
   884                           	opt stack 29
   885                           
   886                           ;incstack = 0
   887  0004E0  0E00               	movlw	0
   888  0004E2  6E06               	movwf	___lwdiv@quotient+1,c
   889  0004E4  0E00               	movlw	0
   890  0004E6  6E05               	movwf	___lwdiv@quotient,c
   891  0004E8  5003               	movf	___lwdiv@divisor,w,c
   892  0004EA  1004               	iorwf	___lwdiv@divisor+1,w,c
   893  0004EC  B4D8               	btfsc	status,2,c
   894  0004EE  D01C               	goto	l583
   895  0004F0  0E01               	movlw	1
   896  0004F2  6E07               	movwf	___lwdiv@counter,c
   897  0004F4  D004               	goto	l1062
   898  0004F6                     l1060:
   899  0004F6  90D8               	bcf	status,0,c
   900  0004F8  3603               	rlcf	___lwdiv@divisor,f,c
   901  0004FA  3604               	rlcf	___lwdiv@divisor+1,f,c
   902  0004FC  2A07               	incf	___lwdiv@counter,f,c
   903  0004FE                     l1062:
   904  0004FE  AE04               	btfss	___lwdiv@divisor+1,7,c
   905  000500  D7FA               	goto	l1060
   906  000502                     l1064:
   907  000502  90D8               	bcf	status,0,c
   908  000504  3605               	rlcf	___lwdiv@quotient,f,c
   909  000506  3606               	rlcf	___lwdiv@quotient+1,f,c
   910  000508  5003               	movf	___lwdiv@divisor,w,c
   911  00050A  5C01               	subwf	___lwdiv@dividend,w,c
   912  00050C  5004               	movf	___lwdiv@divisor+1,w,c
   913  00050E  5802               	subwfb	___lwdiv@dividend+1,w,c
   914  000510  A0D8               	btfss	status,0,c
   915  000512  D005               	goto	l1072
   916  000514  5003               	movf	___lwdiv@divisor,w,c
   917  000516  5E01               	subwf	___lwdiv@dividend,f,c
   918  000518  5004               	movf	___lwdiv@divisor+1,w,c
   919  00051A  5A02               	subwfb	___lwdiv@dividend+1,f,c
   920  00051C  8005               	bsf	___lwdiv@quotient,0,c
   921  00051E                     l1072:
   922  00051E  90D8               	bcf	status,0,c
   923  000520  3204               	rrcf	___lwdiv@divisor+1,f,c
   924  000522  3203               	rrcf	___lwdiv@divisor,f,c
   925  000524  2E07               	decfsz	___lwdiv@counter,f,c
   926  000526  D7ED               	goto	l1064
   927  000528                     l583:
   928  000528  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   929  00052C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   930  000530  0012               	return		;funcret
   931  000532                     __end_of___lwdiv:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           prodh	equ	0xFF4
   938                           prodl	equ	0xFF3
   939                           wreg	equ	0xFE8
   940                           postinc2	equ	0xFDE
   941                           postdec2	equ	0xFDD
   942                           fsr2h	equ	0xFDA
   943                           fsr2l	equ	0xFD9
   944                           status	equ	0xFD8
   945                           
   946 ;; *************** function _lcd_set_cursor *****************
   947 ;; Defined at:
   948 ;;		line 127 in file "Lib/lcd.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  pos             1    wreg     const unsigned char 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  pos             1    3[COMRAM] const unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;		None               void
   955 ;; Registers used:
   956 ;;		wreg, status,2, status,0, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   962 ;;      Params:         0       0       0       0
   963 ;;      Locals:         1       0       0       0
   964 ;;      Temps:          0       0       0       0
   965 ;;      Totals:         1       0       0       0
   966 ;;Total ram usage:        1 bytes
   967 ;; Hardware stack levels used:    1
   968 ;; Hardware stack levels required when called:    3
   969 ;; This function calls:
   970 ;;		_lcd_send_command
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text7
   977  0005F4                     __ptext7:
   978                           	opt stack 0
   979  0005F4                     _lcd_set_cursor:
   980                           	opt stack 27
   981                           
   982                           ;incstack = 0
   983                           ;lcd_set_cursor@pos stored from wreg
   984  0005F4  6E04               	movwf	lcd_set_cursor@pos,c
   985                           
   986                           ;lcd.c: 130: lcd_send_command(0x80 | pos);
   987  0005F6  5004               	movf	lcd_set_cursor@pos,w,c
   988  0005F8  0980               	iorlw	128
   989  0005FA  ECEB  F002         	call	_lcd_send_command
   990                           
   991                           ;lcd.c: 131: _delay((unsigned long)((30)*(4000000/4000000.0)));
   992  0005FE  0E0A               	movlw	10
   993  000600                     u407:
   994  000600  2EE8               	decfsz	wreg,f,c
   995  000602  D7FE               	goto	u407
   996  000604  0012               	return		;funcret
   997  000606                     __end_of_lcd_set_cursor:
   998                           	opt stack 0
   999                           tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           prodh	equ	0xFF4
  1004                           prodl	equ	0xFF3
  1005                           wreg	equ	0xFE8
  1006                           postinc2	equ	0xFDE
  1007                           postdec2	equ	0xFDD
  1008                           fsr2h	equ	0xFDA
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8
  1011                           
  1012 ;; *************** function _lcd_init *****************
  1013 ;; Defined at:
  1014 ;;		line 57 in file "Lib/lcd.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;		None               void
  1021 ;; Registers used:
  1022 ;;		wreg, status,2, status,0, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1028 ;;      Params:         0       0       0       0
  1029 ;;      Locals:         0       0       0       0
  1030 ;;      Temps:          1       0       0       0
  1031 ;;      Totals:         1       0       0       0
  1032 ;;Total ram usage:        1 bytes
  1033 ;; Hardware stack levels used:    1
  1034 ;; Hardware stack levels required when called:    3
  1035 ;; This function calls:
  1036 ;;		_lcd_send_command
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text8
  1043  000434                     __ptext8:
  1044                           	opt stack 0
  1045  000434                     _lcd_init:
  1046                           	opt stack 27
  1047                           
  1048                           ;lcd.c: 58: _delay((unsigned long)((50)*(4000000/4000.0)));
  1049                           
  1050                           ;incstack = 0
  1051  000434  0E41               	movlw	65
  1052  000436  6E04               	movwf	??_lcd_init& (0+255),c
  1053  000438  0EEE               	movlw	238
  1054  00043A                     u417:
  1055  00043A  2EE8               	decfsz	wreg,f,c
  1056  00043C  D7FE               	goto	u417
  1057  00043E  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1058  000440  D7FC               	goto	u417
  1059  000442  D000               	nop2	
  1060                           
  1061                           ;lcd.c: 61: lcd_send_command(0x38);
  1062  000444  0E38               	movlw	56
  1063  000446  ECEB  F002         	call	_lcd_send_command
  1064                           
  1065                           ;lcd.c: 62: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1066  00044A  0E0A               	movlw	10
  1067  00044C                     u427:
  1068  00044C  2EE8               	decfsz	wreg,f,c
  1069  00044E  D7FE               	goto	u427
  1070                           
  1071                           ;lcd.c: 65: lcd_send_command(0x39);
  1072  000450  0E39               	movlw	57
  1073  000452  ECEB  F002         	call	_lcd_send_command
  1074                           
  1075                           ;lcd.c: 66: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1076  000456  0E0A               	movlw	10
  1077  000458                     u437:
  1078  000458  2EE8               	decfsz	wreg,f,c
  1079  00045A  D7FE               	goto	u437
  1080                           
  1081                           ;lcd.c: 69: lcd_send_command(0x14);
  1082  00045C  0E14               	movlw	20
  1083  00045E  ECEB  F002         	call	_lcd_send_command
  1084                           
  1085                           ;lcd.c: 70: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1086  000462  0E0A               	movlw	10
  1087  000464                     u447:
  1088  000464  2EE8               	decfsz	wreg,f,c
  1089  000466  D7FE               	goto	u447
  1090                           
  1091                           ;lcd.c: 73: lcd_send_command(0x70 | (0x28 & 0x0f));
  1092  000468  0E78               	movlw	120
  1093  00046A  ECEB  F002         	call	_lcd_send_command
  1094                           
  1095                           ;lcd.c: 74: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1096  00046E  0E0A               	movlw	10
  1097  000470                     u457:
  1098  000470  2EE8               	decfsz	wreg,f,c
  1099  000472  D7FE               	goto	u457
  1100                           
  1101                           ;lcd.c: 77: lcd_send_command(0x50 | 0 | 0 | ((0x28 >> 4) & 0x03));
  1102  000474  0E52               	movlw	82
  1103  000476  ECEB  F002         	call	_lcd_send_command
  1104                           
  1105                           ;lcd.c: 78: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1106  00047A  0E0A               	movlw	10
  1107  00047C                     u467:
  1108  00047C  2EE8               	decfsz	wreg,f,c
  1109  00047E  D7FE               	goto	u467
  1110                           
  1111                           ;lcd.c: 81: lcd_send_command(0x60 | 0x08 | 0x04);
  1112  000480  0E6C               	movlw	108
  1113  000482  ECEB  F002         	call	_lcd_send_command
  1114                           
  1115                           ;lcd.c: 82: _delay((unsigned long)((110)*(4000000/4000.0)));
  1116  000486  0E8F               	movlw	143
  1117  000488  6E04               	movwf	??_lcd_init& (0+255),c
  1118  00048A  0EDA               	movlw	218
  1119  00048C                     u477:
  1120  00048C  2EE8               	decfsz	wreg,f,c
  1121  00048E  D7FE               	goto	u477
  1122  000490  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1123  000492  D7FC               	goto	u477
  1124  000494  D000               	nop2	
  1125                           
  1126                           ;lcd.c: 83: _delay((unsigned long)((110)*(4000000/4000.0)));
  1127  000496  0E8F               	movlw	143
  1128  000498  6E04               	movwf	??_lcd_init& (0+255),c
  1129  00049A  0EDA               	movlw	218
  1130  00049C                     u487:
  1131  00049C  2EE8               	decfsz	wreg,f,c
  1132  00049E  D7FE               	goto	u487
  1133  0004A0  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1134  0004A2  D7FC               	goto	u487
  1135  0004A4  D000               	nop2	
  1136                           
  1137                           ;lcd.c: 86: lcd_send_command(0x38);
  1138  0004A6  0E38               	movlw	56
  1139  0004A8  ECEB  F002         	call	_lcd_send_command
  1140                           
  1141                           ;lcd.c: 87: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1142  0004AC  0E0A               	movlw	10
  1143  0004AE                     u497:
  1144  0004AE  2EE8               	decfsz	wreg,f,c
  1145  0004B0  D7FE               	goto	u497
  1146                           
  1147                           ;lcd.c: 90: lcd_send_command(0x0c);
  1148  0004B2  0E0C               	movlw	12
  1149  0004B4  ECEB  F002         	call	_lcd_send_command
  1150                           
  1151                           ;lcd.c: 91: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1152  0004B8  0E0A               	movlw	10
  1153  0004BA                     u507:
  1154  0004BA  2EE8               	decfsz	wreg,f,c
  1155  0004BC  D7FE               	goto	u507
  1156                           
  1157                           ;lcd.c: 94: lcd_send_command(0x01);
  1158  0004BE  0E01               	movlw	1
  1159  0004C0  ECEB  F002         	call	_lcd_send_command
  1160                           
  1161                           ;lcd.c: 95: _delay((unsigned long)((2)*(4000000/4000.0)));
  1162  0004C4  0E03               	movlw	3
  1163  0004C6  6E04               	movwf	??_lcd_init& (0+255),c
  1164  0004C8  0E98               	movlw	152
  1165  0004CA                     u517:
  1166  0004CA  2EE8               	decfsz	wreg,f,c
  1167  0004CC  D7FE               	goto	u517
  1168  0004CE  2E04               	decfsz	??_lcd_init& (0+255),f,c
  1169  0004D0  D7FC               	goto	u517
  1170                           
  1171                           ;lcd.c: 98: lcd_send_command(0x06);
  1172  0004D2  0E06               	movlw	6
  1173  0004D4  ECEB  F002         	call	_lcd_send_command
  1174                           
  1175                           ;lcd.c: 99: _delay((unsigned long)((30)*(4000000/4000000.0)));
  1176  0004D8  0E0A               	movlw	10
  1177  0004DA                     u527:
  1178  0004DA  2EE8               	decfsz	wreg,f,c
  1179  0004DC  D7FE               	goto	u527
  1180  0004DE  0012               	return		;funcret
  1181  0004E0                     __end_of_lcd_init:
  1182                           	opt stack 0
  1183                           tblptru	equ	0xFF8
  1184                           tblptrh	equ	0xFF7
  1185                           tblptrl	equ	0xFF6
  1186                           tablat	equ	0xFF5
  1187                           prodh	equ	0xFF4
  1188                           prodl	equ	0xFF3
  1189                           wreg	equ	0xFE8
  1190                           postinc2	equ	0xFDE
  1191                           postdec2	equ	0xFDD
  1192                           fsr2h	equ	0xFDA
  1193                           fsr2l	equ	0xFD9
  1194                           status	equ	0xFD8
  1195                           
  1196 ;; *************** function _lcd_send_command *****************
  1197 ;; Defined at:
  1198 ;;		line 37 in file "Lib/lcd.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;  data            1    wreg     unsigned char 
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;  data            1    2[COMRAM] unsigned char 
  1203 ;; Return value:  Size  Location     Type
  1204 ;;		None               void
  1205 ;; Registers used:
  1206 ;;		wreg, status,2, status,0, cstack
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1212 ;;      Params:         0       0       0       0
  1213 ;;      Locals:         1       0       0       0
  1214 ;;      Temps:          0       0       0       0
  1215 ;;      Totals:         1       0       0       0
  1216 ;;Total ram usage:        1 bytes
  1217 ;; Hardware stack levels used:    1
  1218 ;; Hardware stack levels required when called:    2
  1219 ;; This function calls:
  1220 ;;		_i2c_send
  1221 ;;		_i2c_start
  1222 ;;		_i2c_stop
  1223 ;; This function is called by:
  1224 ;;		_lcd_init
  1225 ;;		_lcd_set_cursor
  1226 ;;		_lcd_cmd
  1227 ;;		_lcd_clear
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text9
  1232  0005D6                     __ptext9:
  1233                           	opt stack 0
  1234  0005D6                     _lcd_send_command:
  1235                           	opt stack 27
  1236                           
  1237                           ;incstack = 0
  1238                           ;lcd_send_command@data stored from wreg
  1239  0005D6  6E03               	movwf	lcd_send_command@data,c
  1240                           
  1241                           ;lcd.c: 38: i2c_start();
  1242  0005D8  EC2E  F003         	call	_i2c_start	;wreg free
  1243                           
  1244                           ;lcd.c: 39: i2c_send((0x3E<<1) | 0);
  1245  0005DC  0E7C               	movlw	124
  1246  0005DE  EC19  F003         	call	_i2c_send
  1247                           
  1248                           ;lcd.c: 40: i2c_send(0 | 0);
  1249  0005E2  0E00               	movlw	0
  1250  0005E4  EC19  F003         	call	_i2c_send
  1251                           
  1252                           ;lcd.c: 41: i2c_send(data);
  1253  0005E8  5003               	movf	lcd_send_command@data,w,c
  1254  0005EA  EC19  F003         	call	_i2c_send
  1255                           
  1256                           ;lcd.c: 42: i2c_stop();
  1257  0005EE  EC13  F003         	call	_i2c_stop	;wreg free
  1258  0005F2  0012               	return		;funcret
  1259  0005F4                     __end_of_lcd_send_command:
  1260                           	opt stack 0
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           prodh	equ	0xFF4
  1266                           prodl	equ	0xFF3
  1267                           wreg	equ	0xFE8
  1268                           postinc2	equ	0xFDE
  1269                           postdec2	equ	0xFDD
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _i2c_stop *****************
  1275 ;; Defined at:
  1276 ;;		line 38 in file "Lib/i2c.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;		None               void
  1283 ;; Registers used:
  1284 ;;		None
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1290 ;;      Params:         0       0       0       0
  1291 ;;      Locals:         0       0       0       0
  1292 ;;      Temps:          0       0       0       0
  1293 ;;      Totals:         0       0       0       0
  1294 ;;Total ram usage:        0 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; This function calls:
  1297 ;;		Nothing
  1298 ;; This function is called by:
  1299 ;;		_lcd_send_command
  1300 ;;		_lcd_send_data
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text10
  1305  000626                     __ptext10:
  1306                           	opt stack 0
  1307  000626                     _i2c_stop:
  1308                           	opt stack 26
  1309                           
  1310                           ;i2c.c: 39: SSPIF = 0;
  1311                           
  1312                           ;incstack = 0
  1313  000626  969E               	bcf	3998,3,c	;volatile
  1314                           
  1315                           ;i2c.c: 40: PEN = 1;
  1316  000628  84C5               	bsf	4037,2,c	;volatile
  1317  00062A                     l45:
  1318  00062A  B4C5               	btfsc	4037,2,c	;volatile
  1319  00062C  D7FE               	goto	l45
  1320                           
  1321                           ;i2c.c: 42: SSPIF = 0;
  1322  00062E  969E               	bcf	3998,3,c	;volatile
  1323  000630  0012               	return		;funcret
  1324  000632                     __end_of_i2c_stop:
  1325                           	opt stack 0
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           prodh	equ	0xFF4
  1331                           prodl	equ	0xFF3
  1332                           wreg	equ	0xFE8
  1333                           postinc2	equ	0xFDE
  1334                           postdec2	equ	0xFDD
  1335                           fsr2h	equ	0xFDA
  1336                           fsr2l	equ	0xFD9
  1337                           status	equ	0xFD8
  1338                           
  1339 ;; *************** function _i2c_start *****************
  1340 ;; Defined at:
  1341 ;;		line 29 in file "Lib/i2c.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;		None
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;		None
  1346 ;; Return value:  Size  Location     Type
  1347 ;;		None               void
  1348 ;; Registers used:
  1349 ;;		wreg, status,2, status,0, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1355 ;;      Params:         0       0       0       0
  1356 ;;      Locals:         0       0       0       0
  1357 ;;      Temps:          0       0       0       0
  1358 ;;      Totals:         0       0       0       0
  1359 ;;Total ram usage:        0 bytes
  1360 ;; Hardware stack levels used:    1
  1361 ;; Hardware stack levels required when called:    1
  1362 ;; This function calls:
  1363 ;;		_i2c_wait
  1364 ;; This function is called by:
  1365 ;;		_lcd_send_command
  1366 ;;		_lcd_send_data
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text11
  1371  00065C                     __ptext11:
  1372                           	opt stack 0
  1373  00065C                     _i2c_start:
  1374                           	opt stack 25
  1375                           
  1376                           ;i2c.c: 30: SSPCON2bits.SEN = 1;
  1377                           
  1378                           ;incstack = 0
  1379  00065C  80C5               	bsf	4037,0,c	;volatile
  1380                           
  1381                           ;i2c.c: 31: i2c_wait();
  1382  00065E  EC03  F003         	call	_i2c_wait	;wreg free
  1383  000662  0012               	return		;funcret
  1384  000664                     __end_of_i2c_start:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           prodh	equ	0xFF4
  1391                           prodl	equ	0xFF3
  1392                           wreg	equ	0xFE8
  1393                           postinc2	equ	0xFDE
  1394                           postdec2	equ	0xFDD
  1395                           fsr2h	equ	0xFDA
  1396                           fsr2l	equ	0xFD9
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function _i2c_send *****************
  1400 ;; Defined at:
  1401 ;;		line 46 in file "Lib/i2c.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  data            1    wreg     const unsigned char 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  data            1    1[COMRAM] const unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;		None               void
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1415 ;;      Params:         0       0       0       0
  1416 ;;      Locals:         1       0       0       0
  1417 ;;      Temps:          0       0       0       0
  1418 ;;      Totals:         1       0       0       0
  1419 ;;Total ram usage:        1 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    1
  1422 ;; This function calls:
  1423 ;;		_i2c_wait
  1424 ;; This function is called by:
  1425 ;;		_lcd_send_command
  1426 ;;		_lcd_send_data
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           	psect	text12
  1431  000632                     __ptext12:
  1432                           	opt stack 0
  1433  000632                     _i2c_send:
  1434                           	opt stack 25
  1435                           
  1436                           ;incstack = 0
  1437                           ;i2c_send@data stored from wreg
  1438  000632  6E02               	movwf	i2c_send@data,c
  1439                           
  1440                           ;i2c.c: 47: SSPBUF = data;
  1441  000634  C002  FFC9         	movff	i2c_send@data,4041	;volatile
  1442                           
  1443                           ;i2c.c: 48: i2c_wait();
  1444  000638  EC03  F003         	call	_i2c_wait	;wreg free
  1445  00063C  0012               	return		;funcret
  1446  00063E                     __end_of_i2c_send:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           wreg	equ	0xFE8
  1455                           postinc2	equ	0xFDE
  1456                           postdec2	equ	0xFDD
  1457                           fsr2h	equ	0xFDA
  1458                           fsr2l	equ	0xFD9
  1459                           status	equ	0xFD8
  1460                           
  1461 ;; *************** function _i2c_wait *****************
  1462 ;; Defined at:
  1463 ;;		line 15 in file "Lib/i2c.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;		None
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;		None
  1468 ;; Return value:  Size  Location     Type
  1469 ;;		None               void
  1470 ;; Registers used:
  1471 ;;		wreg, status,2, status,0
  1472 ;; Tracked objects:
  1473 ;;		On entry : 0/0
  1474 ;;		On exit  : 0/0
  1475 ;;		Unchanged: 0/0
  1476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1477 ;;      Params:         0       0       0       0
  1478 ;;      Locals:         0       0       0       0
  1479 ;;      Temps:          1       0       0       0
  1480 ;;      Totals:         1       0       0       0
  1481 ;;Total ram usage:        1 bytes
  1482 ;; Hardware stack levels used:    1
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_i2c_start
  1487 ;;		_i2c_send
  1488 ;;		_i2c_repeat
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text13
  1493  000606                     __ptext13:
  1494                           	opt stack 0
  1495  000606                     _i2c_wait:
  1496                           	opt stack 25
  1497  000606                     l796:
  1498  000606  CFC5 F001          	movff	4037,??_i2c_wait	;volatile
  1499  00060A  0E1F               	movlw	31
  1500  00060C  1601               	andwf	??_i2c_wait,f,c
  1501  00060E  A4D8               	btfss	status,2,c
  1502  000610  D7FA               	goto	l796
  1503  000612  A4C7               	btfss	4039,2,c	;volatile
  1504  000614  0012               	return	
  1505  000616  D7F7               	goto	l796
  1506  000618                     __end_of_i2c_wait:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           prodh	equ	0xFF4
  1513                           prodl	equ	0xFF3
  1514                           wreg	equ	0xFE8
  1515                           postinc2	equ	0xFDE
  1516                           postdec2	equ	0xFDD
  1517                           fsr2h	equ	0xFDA
  1518                           fsr2l	equ	0xFD9
  1519                           status	equ	0xFD8
  1520                           
  1521 ;; *************** function _i2c_enable *****************
  1522 ;; Defined at:
  1523 ;;		line 19 in file "Lib/i2c.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;		None               void
  1530 ;; Registers used:
  1531 ;;		wreg, status,2
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1537 ;;      Params:         0       0       0       0
  1538 ;;      Locals:         0       0       0       0
  1539 ;;      Temps:          0       0       0       0
  1540 ;;      Totals:         0       0       0       0
  1541 ;;Total ram usage:        0 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text14
  1551  000618                     __ptext14:
  1552                           	opt stack 0
  1553  000618                     _i2c_enable:
  1554                           	opt stack 30
  1555                           
  1556                           ;i2c.c: 20: SSPSTAT = 0b10000000;
  1557                           
  1558                           ;incstack = 0
  1559  000618  0E80               	movlw	128
  1560  00061A  6EC7               	movwf	4039,c	;volatile
  1561                           
  1562                           ;i2c.c: 21: SSPADD = 9;
  1563  00061C  0E09               	movlw	9
  1564  00061E  6EC8               	movwf	4040,c	;volatile
  1565                           
  1566                           ;i2c.c: 22: SSPCON1 = 0b00101000;
  1567  000620  0E28               	movlw	40
  1568  000622  6EC6               	movwf	4038,c	;volatile
  1569  000624  0012               	return		;funcret
  1570  000626                     __end_of_i2c_enable:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           prodh	equ	0xFF4
  1577                           prodl	equ	0xFF3
  1578                           wreg	equ	0xFE8
  1579                           postinc2	equ	0xFDE
  1580                           postdec2	equ	0xFDD
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           prodh	equ	0xFF4
  1589                           prodl	equ	0xFF3
  1590                           wreg	equ	0xFE8
  1591                           postinc2	equ	0xFDE
  1592                           postdec2	equ	0xFDD
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597                           	psect	rparam
  1598  0000                     tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           prodh	equ	0xFF4
  1603                           prodl	equ	0xFF3
  1604                           wreg	equ	0xFE8
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     26      26
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[3]), STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwmod
    _putch->_lcd_putch
    _lcd_putch->_lcd_send_data
    _lcd_send_data->_i2c_send
    ___lwmod->___lwdiv
    _lcd_set_cursor->_lcd_send_command
    _lcd_init->_lcd_send_command
    _lcd_send_command->_i2c_send
    _i2c_start->_i2c_wait
    _i2c_send->_i2c_wait

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1249
                                             24 COMRAM     2     2      0
                         _i2c_enable
                           _lcd_init
                     _lcd_set_cursor
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    1151
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      60
                                              4 COMRAM     1     1      0
                          _lcd_putch
 ---------------------------------------------------------------------------------
 (3) _lcd_putch                                            1     1      0      45
                                              3 COMRAM     1     1      0
                      _lcd_send_data
 ---------------------------------------------------------------------------------
 (4) _lcd_send_data                                        1     1      0      30
                                              2 COMRAM     1     1      0
                           _i2c_send
                          _i2c_start
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       1     1      0      45
                                              3 COMRAM     1     1      0
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0      30
                                              3 COMRAM     1     1      0
                   _lcd_send_command
 ---------------------------------------------------------------------------------
 (2) _lcd_send_command                                     1     1      0      30
                                              2 COMRAM     1     1      0
                           _i2c_send
                          _i2c_start
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0       0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (5) _i2c_send                                             1     1      0      15
                                              1 COMRAM     1     1      0
                           _i2c_wait
 ---------------------------------------------------------------------------------
 (6) _i2c_wait                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _i2c_enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _i2c_enable
   _lcd_init
     _lcd_send_command
       _i2c_send
         _i2c_wait
       _i2c_start
         _i2c_wait
       _i2c_stop
   _lcd_set_cursor
     _lcd_send_command
       _i2c_send
         _i2c_wait
       _i2c_start
         _i2c_wait
       _i2c_stop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcd_putch
         _lcd_send_data
           _i2c_send
             _i2c_wait
           _i2c_start
             _i2c_wait
           _i2c_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     1A      1A       1       27.4%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BANK1              100      0       0       5        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK1           100      0       0       9        0.0%
BIGRAM             2FF      0       0      10        0.0%
DATA                 0      0       0      11        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Jan 19 22:57:28 2016

           ?_lcd_send_data 0001                _SSPSTATbits 000FC7                         l45 062A  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000                        l583 0528  
                      l593 056A                        l796 0606               __CFG_CPB$OFF 000000  
                      u407 0600                        _PEN 007E2A                        u417 043A  
             __CFG_CPD$OFF 000000                        u507 04BA                        u427 044C  
                      u517 04CA                        u437 0458                        u527 04DA  
                      u447 0464                        u457 0470                        u467 047C  
                      u477 048C                        u397 05D0                        u487 049C  
                      u497 04AE               __CFG_BORV$30 000000                        wreg 000FE8  
          ?_lcd_set_cursor 0001               __CFG_LVP$OFF 000000                       l1104 035A  
                     l1114 0382                       l1060 04F6                       l1132 03C4  
                     l1116 0386                       l1140 041A                       l1062 04FE  
                     l1134 03CA                       l1072 051E                       l1064 0502  
                     l1080 0540                       l1128 03B2                       l1082 0548  
                     l1138 0412                       l1084 054C                       l1148 0584  
                     l1094 0320                       l1088 0560                       l1098 0330  
                     STR_1 030B                       STR_2 0311                       _main 0574  
                     fsr2h 000FDA                       fsr2l 000FD9                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
            __CFG_FOSC$IRC 000000               ___param_bank 000010              __CFG_PLLEN$ON 000000  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
                    _EEADR 000FA9            __end_of___lwdiv 0532            __end_of___lwmod 0574  
        ?_lcd_send_command 0001             __CFG_BBSIZ$OFF 000000                      _SSPIF 007CF3  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000         ??_lcd_send_command 0003  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 030B                      _putch 0648             __CFG_BOREN$OFF 000000  
                    tablat 000FF5                      status 000FD8                 _i2c_enable 0618  
           __CFG_MCLRE$OFF 000000            __initialization 063E            ??_lcd_send_data 0003  
             __end_of_main 05B2           __end_of_i2c_send 063E           __end_of_i2c_wait 0618  
         __end_of_i2c_stop 0632                     ??_main 0019              __activetblptr 000002  
                   _EEDATA 000FA8                     _EECON2 000FA7                     ?_putch 0001  
           __CFG_WDTEN$OFF 000000                     _SSPADD 000FC8                     _SSPBUF 000FC9  
       __size_of_i2c_start 0008               i2c_send@data 0002             __CFG_XINST$OFF 000000  
         __end_of_lcd_init 04E0             __CFG_STVREN$ON 000000                  ??___lwdiv 0005  
                ??___lwmod 000C                     _printf 0316               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          __CFG_HFOFST$OFF 000000                 __accesstop 0060    __end_of__initialization 063E  
            ___rparam_used 000001                ?_i2c_enable 0001             __pcstackCOMRAM 0001  
            __end_of_putch 0652          __end_of_i2c_start 0664           ??_lcd_set_cursor 0004  
       __size_of_lcd_putch 000A                    ??_putch 0005                  ?_i2c_send 0001  
                ?_i2c_wait 0001                  ?_i2c_stop 0001                    _ACKSTAT 007E2E  
                  ?_printf 000D       lcd_send_command@data 0003        __size_of_i2c_enable 000E  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5            __CFG_USBDIV$OFF 000000  
                ?_lcd_init 0001                    _SSPSTAT 000FC7                 ??_i2c_send 0002  
               ??_i2c_wait 0001                 ??_i2c_stop 0001  __size_of_lcd_send_command 001E  
          __CFG_PWRTEN$OFF 000000                    __Hparam 0000                    __Lparam 0000  
        __end_of_lcd_putch 065C                    ___lwdiv 04E0                    ___lwmod 0532  
             __psmallconst 0300                    __pcinit 063E                    __ramtop 0300  
                  __ptext0 0574                    __ptext1 0316                    __ptext2 0648  
                  __ptext3 0652                    __ptext4 05B2                    __ptext5 0532  
                  __ptext6 04E0                    __ptext7 05F4                    __ptext8 0434  
                  __ptext9 05D6            __size_of_printf 011E                    _dpowers 0301  
               ??_lcd_init 0004       end_of_initialization 063E              __Lmediumconst 0000  
                  printf@c 0018                    printf@f 000D                    postdec2 000FDD  
                  postinc2 000FDE                    putch@ch 0005      __end_of_lcd_send_data 05D6  
             ??_i2c_enable 0001                 lcd_putch@c 0004             __end_of_printf 0434  
      start_initialization 063E         __end_of_i2c_enable 0626                  _i2c_start 065C  
         _lcd_send_command 05D6          __size_of_i2c_send 000C          __size_of_i2c_wait 0012  
        __size_of_i2c_stop 000C                   ??_printf 0011                 ?_i2c_start 0001  
        lcd_send_data@data 0003          __size_of_lcd_init 00AC           ___lwdiv@dividend 0001  
                 ?___lwdiv 0001                   ?___lwmod 0008                  _lcd_putch 0652  
              __smallconst 0300           ___lwdiv@quotient 0005             __size_of_putch 000A  
  __size_of_lcd_set_cursor 0012           __CFG_WDTPS$32768 000000                 ?_lcd_putch 0001  
               printf@flag 0014                 printf@prec 0015                ??_i2c_start 0002  
                 _i2c_send 0632                   _i2c_wait 0606                   _i2c_stop 0626  
               _EECON1bits 000FA6                   __Hrparam 0000                   __Lrparam 0000  
         __size_of___lwdiv 0052           __size_of___lwmod 0042   __end_of_lcd_send_command 05F4  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 0626  
                 __ptext11 065C                   __ptext12 0632                   __ptext13 0606  
                 __ptext14 0618                   _lcd_init 0434     __size_of_lcd_send_data 0024  
            __size_of_main 003E                  printf@val 0016                   main@hoge 0019  
              ??_lcd_putch 0004                 _INTCONbits 000FF2             _lcd_set_cursor 05F4  
        lcd_set_cursor@pos 0004           ___lwmod@dividend 0008                   printf@ap 0012  
     __CFG_CPUDIV$NOCLKDIV 000000              _lcd_send_data 05B2            ___lwmod@divisor 000A  
          ___lwmod@counter 000C                _SSPCON2bits 000FC5     __end_of_lcd_set_cursor 0606  
